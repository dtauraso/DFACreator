const forMatlab = false;

let hashLookup = {
  '':   1,
  a:    2,
  b:    3,
  c:    4,
  aa:   5,
  ab:   6,
  ac:   7,
  bb:   8,
  ba:   9,
  bc:  10,
  ca:  11,
  cb:  12,
  cc:  13,
  aab: 14,
  aac: 15,
  aba: 16,
  abb: 17,
  abc: 18,
  aca: 19,
  acb: 20,
  acc: 21,
  bac: 22,
  baa: 23,
  bab: 24,
  bba: 25,
  bbc: 26,
  bca: 27,
  bcb: 28,
  bcc: 29,
  ccb: 30,
  cab: 31,
  caa: 32,
  cac: 33,
  cba: 34,
  cbb: 35,
  cbc: 36,
  cca: 37
}

let hashmap = {
  1:     '',
  2:    'a',
  3:    'b',
  4:    'c',
  5:   'aa',
  6:   'ab',
  7:   'ac',
  8:   'bb',
  9:   'ba',
  10:  'bc',
  11:  'ca',
  12:  'cb',
  13:  'cc',
  14: 'aab',
  15: 'aac',
  16: 'aba',
  17: 'abb',
  18: 'abc',
  19: 'aca',
  20: 'acb',
  21: 'acc',
  22: 'bac',
  23: 'baa',
  24: 'bab',
  25: 'bba',
  26: 'bbc',
  27: 'bca',
  28: 'bcb',
  29: 'bcc',
  30: 'ccb',
  31: 'cab',
  32: 'caa',
  33: 'cac',
  34: 'cba',
  35: 'cbb',
  36: 'cbc',
  37: 'cca'
}

const isValid = (nums, added) => {
  let a, b, c;

  if (nums.length < 3 ) { return true;}
  nums += added;
  for (let item of nums) {
    switch (item) {
      case 'a':
        a = true;
        break;

      case 'b':
        b = true;
        break;

      case 'c':
        c = true;
        break;

      default:
        console.log('Error');
        break;
    }
  }

  return (a && b && c) ? true : false;
}

function *tStates() {
  yield 'a';
  yield 'b';
  yield 'c';
}

const regulateSpace = item => {
  if (item.length === 0)
    return `nul`;

  if (item.length === 1)
    return `${item}  `;

  if (item.length == 2)
    return `${item} `;

  return item;
}


var array = new Array(37);
for (var i = 0; i < 37; i++) {
  array[i] = new Array(37).fill(0);
}
let state, iter, accum, storedState;

for (let i = 1; i <= 37; i++) {
  storedState = hashmap[i]
  for (item of tStates()) {
    if (isValid(storedState, item)) {
      state = storedState + item;
      state = state.length === 4 ? state.slice(1,4) : state;
      array[i-1][hashLookup[state] - 1] += 1;
    }
  }
}


if (!forMatlab) {
  iter = 0
  for (item in hashLookup) {
    console.log(`${regulateSpace(item)} : ${JSON.stringify(array[iter++])}`);
  }
} else {
  for (let i = 0; i < array.length; i++) {
    console.log(JSON.stringify(array[i]))
  }
}


/*
Starting State:  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

//find accepting State
for (item in hashmap) {
  arr.push(hashmap[item].length === 3 ? 1 : 0)
}

accepting states
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

/*

add starting state to this.
[0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]
*/


/*



let hashLookup = {
  a:    1,
  b:    2,
  c:    3,
  aa:   4,
  ab:   5,
  ac:   6,
  bb:   7,
  ba:   8,
  bc:   9,
  ca:  10,
  cb:  11,
  cc:  12,
  aab: 13,
  aac: 14,
  aba: 15,
  abb: 16,
  abc: 17,
  aca: 18,
  acb: 19,
  acc: 20,
  bac: 21,
  baa: 22,
  bab: 23,
  bba: 24,
  bbc: 25,
  bca: 26,
  bcb: 27,
  bcc: 28,
  ccb: 29,
  cab: 30,
  caa: 31,
  cac: 32,
  cba: 33,
  cbb: 34,
  cbc: 35,
  cca: 36
}

let hashmap = {
  1:   'a',
  2:   'b',
  3:   'c',
  4: 'aa',
  5: 'ab',
  6: 'ac',
  7: 'bb',
  8: 'ba',
  9: 'bc',
  10: 'ca',
  11: 'cb',
  12: 'cc',
  13: 'aab',
  14: 'aac',
  15: 'aba',
  16: 'abb',
  17: 'abc',
  18: 'aca',
  19: 'acb',
  20: 'acc',
  21: 'bac',
  22: 'baa',
  23: 'bab',
  24: 'bba',
  25: 'bbc',
  26: 'bca',
  27: 'bcb',
  28: 'bcc',
  29: 'ccb',
  30: 'cab',
  31: 'caa',
  32: 'cac',
  33: 'cba',
  34: 'cbb',
  35: 'cbc',
  36: 'cca'
}

*/
